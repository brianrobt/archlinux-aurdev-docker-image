name: Build and Publish Docker Image

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

env:
  REGISTRY_DOCKERHUB: docker.io
  REGISTRY_GHCR: ghcr.io
  IMAGE_NAME: brianrobt/archlinux-aur-dev

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    outputs:
      version: ${{ steps.version.outputs.version }}
      dockerfile-changed: ${{ steps.changes.outputs.dockerfile }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Check for Dockerfile changes
      id: changes
      uses: dorny/paths-filter@v3
      with:
        filters: |
          dockerfile:
            - 'Dockerfile'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_DOCKERHUB }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_GHCR }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get latest tag
      id: get-latest-tag
      run: |
        latest_tag=$(git tag --sort=-version:refname | head -1 || echo "v1.2.0")
        echo "latest-tag=$latest_tag" >> $GITHUB_OUTPUT
        echo "Latest tag: $latest_tag"

    - name: Determine version bump
      id: version
      env:
        DOCKERFILE_CHANGED: ${{ steps.changes.outputs.dockerfile }}
        LATEST_TAG: ${{ steps.get-latest-tag.outputs.latest-tag }}
      run: |
        # Remove 'v' prefix if present
        current_version=${LATEST_TAG#v}

        # Split version into parts
        IFS='.' read -ra VERSION_PARTS <<< "$current_version"
        major=${VERSION_PARTS[0]}
        minor=${VERSION_PARTS[1]}
        patch=${VERSION_PARTS[2]}

        # Determine version bump based on Dockerfile changes
        if [ "$DOCKERFILE_CHANGED" == "true" ]; then
          # Feature bump for Dockerfile changes
          new_minor=$((minor + 1))
          new_version="v${major}.${new_minor}.0"
          echo "Dockerfile changed - feature bump: $new_version"
        else
          # Patch bump for package updates only
          new_patch=$((patch + 1))
          new_version="v${major}.${minor}.${new_patch}"
          echo "No Dockerfile changes - patch bump: $new_version"
        fi

        echo "version=$new_version" >> $GITHUB_OUTPUT
        echo "New version: $new_version"

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.IMAGE_NAME }}
          ${{ env.REGISTRY_GHCR }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.title=Arch Linux AUR Development Environment
          org.opencontainers.image.description=Docker image for Arch Linux AUR package development with yay, paru, and development tools
          org.opencontainers.image.vendor=brianrobt

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create and push git tag
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
      env:
        VERSION: ${{ steps.version.outputs.version }}
        DOCKERFILE_CHANGED: ${{ steps.changes.outputs.dockerfile }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Create annotated tag with release notes
        if [ "$DOCKERFILE_CHANGED" == "true" ]; then
          git tag -a "$VERSION" -m "Release $VERSION - Dockerfile changes
        else
          git tag -a "$VERSION" -m "Release $VERSION - Package updates
        fi
        git push origin "$VERSION"

    - name: Update latest tag on GitHub
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/master'
      run: |
        # Delete existing latest tag locally and remotely
        git tag -d latest || true
        git push origin :refs/tags/latest || true

        # Create new latest tag
        git tag -a latest -m "Latest release - ${{ steps.version.outputs.version }}"
        git push origin latest

  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always() && github.event_name != 'pull_request'
    steps:
    - name: Build Summary
      run: |
        echo "## Docker Image Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version:** ${{ needs.build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Dockerfile Changed:** ${{ needs.build.outputs.dockerfile-changed }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Published Images:" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Hub: \`${{ env.IMAGE_NAME }}:${{ needs.build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Hub: \`${{ env.IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub: \`${{ env.REGISTRY_GHCR }}/${{ github.repository }}:${{ needs.build.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- GitHub: \`${{ env.REGISTRY_GHCR }}/${{ github.repository }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Supported Architectures:" >> $GITHUB_STEP_SUMMARY
        echo "- linux/amd64" >> $GITHUB_STEP_SUMMARY
        echo "- linux/arm64" >> $GITHUB_STEP_SUMMARY